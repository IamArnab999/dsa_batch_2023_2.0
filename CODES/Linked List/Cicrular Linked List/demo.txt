#include <stdio.h>
#include <stdlib.h>
// define the node
struct node
{
    int data;
    struct node *next;
};

struct node *createLinkedList()
{
    struct node *head = NULL;
    struct node *newNode, *temp;
    int ch;
    while (1)
    {
        newNode = (struct node *)malloc(sizeof(struct node)); // dynamic mempory allocate
        printf("Enter the data: ");
        scanf("%d", &newNode->data);
        newNode->next = 0;
        // head=newNode;
        if (head == NULL)
        {
            // head = newNode;
            head = temp = newNode;
        }
        else
        {
            // head->next = newNode;
            temp->next = newNode;
            temp = newNode;
        }
        temp->next = head;

        printf("Do you want to continue then hit (0 or 1)");
        scanf("%d", &ch); // 1 = True 0 = false

        if (ch == 0)
        {
            break;
        }
    }
    return head;
}

void traverseLinkedList(struct node *head)
{
    if (head == NULL)
    {
        printf("List is empty");
    }
    else
    {
        struct node *ptr = head;
        while (ptr->next!=head)
        {
            printf("%d ", ptr->data);
            ptr = ptr->next;
        }
        printf("%d",ptr->data);
    }
}
int main()
{
    struct node *head;
    head = createLinkedList();
    traverseLinkedList(head);
    return 0;
}


//insertion
struct node *insertAtBeginning()
{
    
    newNode = (struct node *)malloc(sizeof(struct node));
    printf("Enter the data: ");
    scanf("%d", &newNode->data);
    newNode->next = 0;
    if (tail == NULL)
    {
        tail = newNode;
        tail->next = tail;
    }
    else
    {
        newNode->next = tail->next;
        tail->next = newNode;
    }
    printf("Insertion at beginning is successful\n");
    printf("tail->next->data: %d\n", tail->next->data);
    return tail;
}

struct node *insertAtEnd()
{
    newNode = (struct node *)malloc(sizeof(struct node));
    printf("Enter the data: ");
    scanf("%d", &newNode->data);
    newNode->next = 0;
    if (tail == NULL)
    {
        tail = newNode;
        tail->next = tail;
    }
    else
    {
        newNode->next = tail->next;
        tail->next = newNode;
        tail = newNode;
    }
    printf("Insertion at end is successful\n");
    printf("tail->next->data: %d\n", tail->next->data);
    return tail;
}

struct node *insertAtPosition()
{
    int pos, i = 1;
    printf("Enter the position: ");
    scanf("%d", &pos);
    if(pos <= 0){
        printf("Invalid position\n");
    }
    else if (pos == 1)
    {
        insertAtBeginning();
    }
    //only when the logic is i<pos
    /*else if(pos==l)
    {
        insertAtEnd();
    }*/
    else
    {
        newNode = (struct node *)malloc(sizeof(struct node));
        printf("Enter the data: ");
        scanf("%d", &newNode->data);
        newNode->next = 0;
        temp = tail->next;
        while (i < pos)
        {
            temp = temp->next;
            i++;
        }
        newNode->next = temp->next;
        temp->next = newNode;
    }
    
    return tail;
}


//delete
struct node *deleteAtBeginning()
{
    if (tail == NULL)
    {
        printf("List is empty\n");
    }
    else if (tail->next == tail)
    {
        temp = tail;
        tail = NULL;
        free(temp);
    }
    else
    {
        temp = tail->next;
        tail->next = temp->next;
        free(temp);
    }
    return tail;
}

struct node *deleteAtEnd()
{
    struct node *current, *previous;
    current = tail->next;
    if (tail == NULL)
    {
        printf("List is empty\n");
    }
    else if (tail->next == tail)
    {
        temp = tail;
        tail = NULL;
        free(temp);
    }
    else
    {
        while(current->next!=tail->next)
        {
            previous=current;
            current=current->next;
        }
        previous->next=tail->next;
        tail=previous;
        free(current);   
    }
    return tail;
}

struct node *deleteAtGivenPosition()
{
    struct node *current, *previous;
    int pos, i = 1;
    l=length();
    current = tail->next;
    if (tail == NULL)
    {
        printf("List is empty\n");
    }
    else
    {
        printf("Enter the position: ");
        scanf("%d", &pos);
        if(pos>l){
            printf("Invalid position\n");
        }
        else if (pos == 1)
        {
            deleteAtBeginning();
        }
        else if(pos==l){
            deleteAtEnd();
        }
        else
        {
            while (i < pos - 1)
            {
                current = current->next;
                i++;
            }
            previous = current->next;
            current->next = previous->next;
            free(previous);
        }
    }
    return tail;
}